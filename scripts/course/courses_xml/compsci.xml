<?xml version="1.0" ?>
<department abbr="COMPSCI" name="Computer Science (Engineering)">
    <course name="Introduction to Symbolic Programming" number="3" units="4">
        Introduction to computer programming, emphasizing symbolic computation and functional programming style. Students will write a project of at least 200 lines of code, using the Scheme programming language.
    </course>
    <course name="Introduction to Symbolic Programming" number="3L" units="4">
        Introduction to computer programming, emphasizing symbolic computation and functional programming style. Students will write a project of at least 200 lines of code in Scheme (a dialect of the LISP programming language).
    </course>
    <course name="Introduction to Symbolic Programming (Self-Paced)" number="3S" units="1-4">
        The same material as 3 but in a self-paced format; introduction to computer programming, emphasizing symbolic computation and functional programming style, using the Scheme programming language. Units assigned depend on amount of work completed. The first two units must be taken together.
    </course>
    <course name="Matlab for Programmers" number="9A" units="1">
        Introduction to the constructs in the Matlab programming language, aimed at students who already know how to program. Array and matrix operations, functions and function handles, control flow, plotting and image manipulation, cell arrays and structures, and the Symbolic Mathematics toolbox.
    </course>
    <course name="Pascal for Programmers" number="9B" units="1">
        Self-paced Pascal course for students who already know how to program. This course provides the practice with the use of pointers and linked data structures that is assumed as prerequisite for 9C and 9F.
    </course>
    <course name="C for Programmers" number="9C" units="1">
        Self-paced course in the C programming language for students who already know how to program. Computation, input and output, flow of control, functions, arrays, and pointers, linked structures, use of dynamic storage, and implementation of abstract data types.
    </course>
    <course name="Scheme and Functional Programming for Programmers" number="9D" units="1">
        Self-paced course in functional programming, using the Scheme programming language, for students who already know how to program. Recursion; higher-order functions; list processing; implementation of rule-based querying.
    </course>
    <course name="Productive Use of the UNIX Environment" number="9E" units="1">
        Use of UNIX utilities and scripting facilities for customizing the programming environment, organizing files (possibly in more than one computer account), implementing a personal database, reformatting text, and searching for online resources.
    </course>
    <course name="C++ for Programmers" number="9F" units="1">
        Self-paced introduction to the constructs provided in the C++ programming language for procedural and object-oriented programming, aimed at students who already know how to program.
    </course>
    <course name="JAVA for Programmers" number="9G" units="1">
        Self-paced course in Java for students who already know how to program. Applets; variables and computation; events and flow of control; classes and objects; inheritance; GUI elements; applications; arrays, strings, files, and linked structures; exceptions; threads.
    </course>
    <course name="Python for Programmers" number="9H" units="1">
        Introduction to the constructs provided in the Python programming language, aimed at students who already know how to program. Flow of control; strings, tuples, lists, and dictionaries; CGI programming; file input and output; object-oriented programming; GUI elements.
    </course>
    <course name="Freshman Seminars" number="24" units="1">
        The Freshman Seminar Program has been designed to provide new students with the opportunity to explore an intellectual topic with a faculty member in a small-seminar setting. Freshman seminars are offered in all campus departments, and topics vary from department to department and semester to semester. Enrollment limited to 15 freshmen.
    </course>
    <course name="Freshman/Sophomore Seminar" number="39J" units="2-4">
        Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.
    </course>
    <course name="Freshman/Sophomore Seminar" number="39K" units="2-4">
        Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.
    </course>
    <course name="Freshman/Sophomore Seminar" number="39L" units="2-4">
        Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.
    </course>
    <course name="Completion of Work in Computer Science 61A" number="47A" units="1">
        Implementation of generic operations. Streams and iterators. Implementation techniques for supporting functional, object-oriented, and constraint-based programming in the Scheme programming language. Together with 9D, 47A constitutes an abbreviated, self-paced version of 61A for students who have already taken a course equivalent to 61B.
    </course>
    <course name="Completion of Work in Computer Science 61B" number="47B" units="1">
        Iterators. Hashing, applied to strings and multi-dimensional structures. Heaps. Storage management. Design and implementation of a program containing hundreds of lines of code. Students with sufficient partial credit in 61B may, with consent of instructor, complete the credit in this self-paced course.
    </course>
    <course name="Completion of Work in Computer Science 61C" number="47C" units="1">
        MIPS instruction set simulation. The assembly and linking process. Caches and virtual memory. Pipelined computer organization. Students with sufficient partial credit in 61C may, with consent of instructor, complete the credit in this self-paced course.
    </course>
    <course name="The Structure and Interpretation of Computer Programs" number="61A" units="4">
        Introduction to programming and computer science. This course exposes students to techniques of abstraction at several levels: (a) within a programming language, using higher-order functions, manifest types, data-directed programming, and message-passing; (b) between programming languages, using functional and rule-based languages as examples. It also relates these techniques to the practical problems of implementation of languages and algorithms on a von Neumann machine. There are several significant programming projects, programmed in a dialect of the LISP language.
    </course>
    <course name="Data Structures" number="61B" units="4">
        Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.
    </course>
    <course name="Data Structures and Programming Methodology" number="61BL" units="4">
        The same material as in 61B, but in a laboratory-based format.
    </course>
    <course name="Machine Structures" number="61C" units="4">
        The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.
    </course>
    <course name="Machine Structures" number="61CL" units="4">
        The same material as in 61C but in a laboratory-based format.
    </course>
    <course name="Discrete Mathematics and Probability Theory" number="70" units="4">
        Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.
    </course>
    <course name="Sophomore Seminar" number="84" units="1,2">
        Sophomore seminars are small interactive courses offered by faculty members in departments all across the campus. Sophomore seminars offer opportunity for close, regular intellectual contact between faculty members and students in the crucial second year. The topics vary from department to department and semester to semester. Enrollment limited to 15 sophomores.
    </course>
    <course name="Directed Group Study" number="98" units="1-4">
        Seminars for group study of selected topics, which will vary from year to year. Intended for students in the lower division.
    </course>
    <course name="Individual Study and Research for Undergraduates" number="99" units="1-2">
        A course for lower division students in good standing who wish to undertake a program of individual inquiry initiated jointly by the student and a professor. There are no other formal prerequisites, but the supervising professor must be convinced that the student is able to profit by the program.
    </course>
    <course name="Components and Design Techniques for Digital Systems" number="150" units="5">
        Basic building blocks and design methods to contruct synchronous digital systems. Alternative representations for digital systems. Bipolar TTL vs. MOS implementation technologies. Standard logic (SSI, MSI) vs. programmable logic (PLD, PGA). Finite state machine design. Digital computer building blocks as case studies. Introduction to computer-aided design software. Formal hardware laboratories and substantial design project. Informal software laboratory periodically throughout semester.
    </course>
    <course name="Computer Architecture and Engineering" number="152" units="5">
        Instruction set design, Register Transfer. Computer design project requiring about 100 hours. Data-path design. Controller design. Memory system. Addressing. Microprogramming. Computer arithmetic. Survey of real computers and microprocessors.
    </course>
    <course name="User Interface Design and Development" number="160" units="4">
        The design, implementation, and evaluation of human/computer interfaces. Interface devices (keyboard, pointing, display, audio, etc.), metaphors (desktop, notecards, rooms, ledger sheets, tables, etc.), interaction styles and dialog models, design examples, and user-centered design and task analysis. Interface-development methodologies, implementation tools, testing, and quality assessment. Students will develop a direct-manipulation interface.
    </course>
    <course name="Computer Security" number="161" units="4">
        Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems.
    </course>
    <course name="Operating Systems and System Programming" number="162" units="4">
        Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.
    </course>
    <course name="Programming Languages and Compilers" number="164" units="4">
        Survey of programming languages. The design of modern programming languages. Principles and techniques of scanning, parsing, semantic analysis, and code generation. Implementation of compilers, interpreters, and assemblers. Overview of run-time organization and error handling.
    </course>
    <course name="Software Engineering" number="169" units="4">
        Ideas and techniques for designing, developing, and modifying large software systems. Function-oriented and object-oriented modular design techniques, designing for re-use and maintainability. Specification and documentation. Verification and validation. Cost and quality metrics and estimation. Project team organization and management. Students will work in teams on a substantial programming project.
    </course>
    <course name="Efficient Algorithms and Intractable Problems" number="170" units="4">
        Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.
    </course>
    <course name="Computability and Complexity" number="172" units="4">
        Finite automata, Turing machines and RAMs. Undecidable, exponential, and polynomial-time problems. Polynomial-time equivalence of all reasonable models of computation. Nondeterministic Turing machines. Theory of NP-completeness: Cook's theorem, NP-completeness of basic problems. Selected topics in language theory, complexity and randomness.
    </course>
    <course name="Combinatorics and Discrete Probability" number="174" units="4">
        Permutations, combinations, principle of inclusion and exclusion, generating functions, Ramsey theory. Expectation and variance, Chebychev's inequality, Chernov bounds. Birthday paradox, coupon collector's problem, Markov chains and entropy computations, universal hashing, random number generation, random graphs and probabilistic existence bounds.
    </course>
    <course name="The Neural Basis of Thought and Language" number="C182" units="4">
        This is a course on the current status of interdisciplinary studies that seeks to answer the following questions: (1) How is it possible for the human brain, which is a highly structured network of neurons, to think and to learn, use, and understand language? (2) How are language and thought related to perception, motor control, and our other neural systems, including social cognition? (3) How do the computational properties of neural systems and the specific neural structures of the human brain shape the nature of thought and language? Much of the course will focus on the Neural Theory of Language (NTL), which seeks to answer these questions in terms of architecture and mechanism, using models and simulations of language and learning phenomena. Also listed as Cognitive Science C110 and Linguistics C109.
    </course>
    <course name="Foundations of Computer Graphics" number="184" units="4">
        Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms for clipping, hidden surface removal, rasterization, and anti-aliasing. Scan-line based and ray-based rendering algorithms. Lighting models for reflection, refraction, transparency.
    </course>
    <course name="Introduction to Database Systems" number="186" units="4">
        Access methods and file systems to facilitate data access. Hierarchical, network, relational, and object-oriented data models. Query languages for models. Embedding query languages in programming languages. Database services including protection, integrity control, and alternative views of data. High-level interfaces including application generators, browsers, and report writers. Introduction to transaction processing. Database system implementation to be done as term project.
    </course>
    <course name="Introduction to Artificial Intelligence" number="188" units="4">
        Basic ideas and techniques underlying the design of intelligent computer systems. Topics include heuristic search, problem solving, game playing, knowledge representation, logical inference, planning, reasoning under uncertainty, expert systems, learning, perception, language understanding.
    </course>
    <course name="Quantum Information Science and Technology" number="C191" units="3">
        This multidisciplinary course provides an introduction to fundamental conceptual aspects of quantum mechanics from a computational and informational theoretic perspective, as well as physical implementations and technological applications of quantum information science. Basic sections of quantum algorithms, complexity, and cryptography, will be touched upon, as well as pertinent physical realizations from nanoscale science and engineering. Also listed as Physics C191 and Chemistry C191.
    </course>
    <course name="Special Topics" number="194" units="1-4">
        Topics will vary semester to semester. See the Computer Science Division announcements.
    </course>
    <course name="Social Implications of Computer Technology" number="195" units="2">
        Topics include electronic community; the changing nature of work; technological risks; the information economy; intellectual property; privacy; artificial intelligence and the sense of self; pornography and censorship; professional ethics. Students will lead discussions on some of these topics.
    </course>
    <course name="Social Implications of Computer Technology" number="C195" units="2">
        Topics include electronic community; the changing nature of work; technological risks; the information economy; intellectual property; privacy; artificial intelligence and the sense of self; pornography and censorship; professional ethics. Students will lead discussions on some of these topics. Also listed as Interdisciplinary Studies Field Maj C155.
    </course>
    <course name="Honors Seminar for Computer Science Majors" number="H196" units="3">
        Study in-depth of several topics in computer science to be chosen by the instructor. Students will assess current literature in the topics and present critiques to the class. Each student will carry out a project.
    </course>
    <course name="Senior Honors Thesis Research" number="H196A" units="1-4">
        Thesis work under the supervision of a faculty member. To obtain credit the student must, at the end of two semesters, submit a satisfactory thesis to the Electrical Engineering and Computer Science department archive. A total of four units must be taken. The units many be distributed between one or two semesters in any way. H196A-H196B count as graded technical elective units, but may not be used to satisfy the requirement for 27 upper division technical units in the College of Letters and Science with a major in Computer Science.
    </course>
    <course name="Senior Honors Thesis Research" number="H196B" units="1-4">
        Thesis work under the supervision of a faculty member. To obtain credit the student must, at the end of two semesters, submit a satisfactory thesis to the Electrical Engineering and Computer Science department archive. A total of four units must be taken. The units many be distributed between one or two semesters in any way. H196A-H196B count as graded technical elective units, but may not be used to satisfy the requirement for 27 upper division technical units in the College of Letters and Science with a major in Computer Science.
    </course>
    <course name="Directed Group Studies for Advanced Undergraduates" number="198" units="1-4">
        Group study of selected topics in Computer Sciences, usually relating to new developments.
    </course>
    <course name="Supervised Independent Study" number="199" units="1-4">
        Supervised independent study. Enrollment restrictions apply.
    </course>
    <course name="VLSI Systems Design" number="250" units="4">
        Unified top-down and bottom-up design of integrated circuits and systems concentrating on architectural and topological issues. VLSI architectures, systolic arrays, self-timed systems. Trends in VLSI development. Physical limits. Tradeoffs in custom-design, standard cells, gate arrays. VLSI design tools.
    </course>
    <course name="Graduate Computer Architecture" number="252" units="4">
        Graduate survey of contemporary computer organizations covering: early systems, CPU design, instruction sets, control, processors, busses, ALU, memory, I/O interfaces, connection networks, virtual memory, pipelined computers, multiprocessors, and case studies. Term paper or project is required.
    </course>
    <course name="Parallel Processors" number="258" units="3">
        In-depth study of the design, engineering, and evaluation of modern parallel computers. Fundamental design: naming, synchronization, latency, and bandwidth. Architectural evolution and technological driving forces. Parallel programming models, communication primitives, programming and compilation techniques, multiprogramming workloads and methodology for quantitative evaluation. Latency avoidance through replication in small-scale and large-scale shared memory designs; cache-coherency, protocols, directories, and memory consistency models. Message passing: protocols, storage management, and deadlock. Efficient network interface, protection, events, active messages, and coprocessors in large-scale designs. Latency tolerance through prefetching, multithreading, dynamic instruction scheduling, and software techniques. Network design: topology, packaging, k-ary n-cubes, performance under contention. Synchronization: global operations, mutual exclusion, and events. Alternative architectures: dataflow, SIMD, systoltic arrays.
    </course>
    <course name="User-Interfaces to Computer Systems" number="260" units="3">
        Formerly CS 287. Design and implementation of user-interfaces to computer systems. Software and hardware architectures for personal workstations. Object-oriented programming systems. Form-based user-interfaces. Window and display management abstractions. Case studies of naive- and expert-user interfaces. Students will complete a substantial project.
    </course>
    <course name="Security in Computer Systems" number="261" units="3">
        Graduate survey of modern topics in computer security, including protection, access control, distributed access security, firewalls, secure coding practices, safe languages, mobile code, and case studies from real-world systems. May also cover cryptographic protocols, privacy and anonymity, and/or other topics as time permits.
    </course>
    <course name="Advanced Topics in Computer Systems" number="262A" units="4">
        Graduate survey of systems for managing computation and information, covering a breadth of topics: early systems; volatile memory management, including virtual memory and buffer management; persistent memory systems, including both file systems and transactional storage managers; storage metadata, physical vs. logical naming, schemas, process scheduling, threading and concurrency control; system support for networking, including remote procedure calls, transactional RPC, TCP, and active messages; security infrastructure; extensible systems and APIs; performance analysis and engineering of large software systems. Homework assignments, exam, and term paper or project required.
    </course>
    <course name="Advanced Topics in Computer Systems" number="262B" units="3">
        Continued graduate survey of large-scale systems for managing information and computation. Topics include basic performance measurement; extensibility, with attention to protection, security, and management of abstract data types; index structures, including support for concurrency and recovery; parallelism, including parallel architectures, query processing and scheduling; distributed data management, including distributed and mobile file systems and databases; distributed caching; large-scale data analysis and search. Homework assignments, exam, and term paper or project required.
    </course>
    <course name="Design of Programming Languages" number="263" units="3">
        Selected topics from: analysis, comparison, and design of programming languages, formal description of syntax and semantics, advanced programming techniques, structured programming, debugging, verification of programs and compilers, and proofs of correctness.
    </course>
    <course name="Implementation of Programming Languages" number="264" units="4">
        Compiler construction. Lexical analysis, syntax analysis. Semantic analysis code generation and optimization. Storage management. Run-time organization.
    </course>
    <course name="Compiler Optimization and Code Generation" number="265" units="3">
        Table-driven and retargetable code generators. Register management. Flow analysis and global optimization methods. Code optimization for advanced languages and architectures. Local code improvement. Optimization by program transformation. Selected additional topics. A term paper or project is required.
    </course>
    <course name="Applications of Parallel Computers" number="C267" units="3">
        Models for parallel programming. Fundamental algorithms for linear algebra, sorting, FFT, etc. Survey of parallel machines and machine structures. Exiting parallel programming languages, vectorizing compilers, environments, libraries and toolboxes. Data partitioning techniques. Techniques for synchronization and load balancing. Detailed study and algorithm/program development of medium sized applications. Also listed as Engineering C233.
    </course>
    <course name="Computer Networks" number="268" units="3">
        Distributed systems, their notivations, applications, and organization. The network component. Network architectures. Local and long-haul networks, technologies, and topologies. Data link, network, and transport protocols. Point-to-point and broadcast networks. Routing and congestion control. Higher-level protocols. Naming. Internetworking. Examples and case studies.
    </course>
    <course name="Combinatorial Algorithms and Data Structures" number="270" units="3">
        Design and analysis of efficient algorithms for combinatorial problems. Network flow theory, matching theory, matroid theory; augmenting-path algorithms; branch-and-bound algorithms; data structure techniques for efficient implementation of combinatorial algorithms; analysis of data structures; applications of data structure techniques to sorting, searching, and geometric problems.
    </course>
    <course name="Randomness and Computation" number="271" units="3">
        Computational applications of randomness and computational theories of randomness. Approximate counting and uniform generation of combinatorial objects, rapid convergence of random walks on expander graphs, explicit construction of expander graphs, randomized reductions, Kolmogorov complexity, pseudo-random number generation, semi-random sources.
    </course>
    <course name="Foundations of Parallel Computation" number="273" units="3">
        Formerly 292K. Fundamental theoretical issues in designing parallel algorithms and architectures. Shared memory models of parallel computation. Parallel algorithms for linear algegra, sorting, Fourier Transform, recurrence evaluation, and graph problems. Interconnection network based models. Algorithm design techniques for networks like hypercubes, shuffle-exchanges, threes, meshes and butterfly networks. Systolic arrays and techniques for generating them. Message routing.
    </course>
    <course name="Computational Geometry" number="274" units="3">
        Formerly 292T. Constructive problems in computational geometry: convex hulls, triangulations, Voronoi diagrams, arrangements of hyperplanes; relationships among these problems. Search problems: advanced data structures; subdivision search; various kinds of range searches. Models of computation; lower bounds.
    </course>
    <course name="Cryptography" number="276" units="3">
        Graduate survey of modern topics on theory, foundations, and applications of modern cryptography. One-way functions; pseudorandomness; encryption; authentication; public-key cryptosystems; notions of security. May also cover zero-knowledge proofs, multi-party cryptographic protocols, practical applications, and/or other topics, as time permits.
    </course>
    <course name="Machine-Based Complexity Theory" number="278" units="3">
        Properties of abstract complexity measures; Determinism vs. nondeterminism; time vs. space; complexity hierarchies; aspects of the P-NP question; relative power of various abstract machines.
    </course>
    <course name="Computer Vision" number="C280" units="3">
        Paradigms for computational vision. Relation to human visual perception. Mathematical techniques for representing and reasoning, with curves, surfaces and volumes. Illumination and reflectance models. Color perception. Image segmentation and aggregation. Methods for bottom-up three dimensional shape recovery: Line drawing analysis, stereo, shading, motion, texture. Use of object models for prediction and recognition. Also listed as Vision Science C280.
    </course>
    <course name="Statistical Learning Theory" number="C281A" units="3">
        Classification regression, clustering, dimensionality, reduction, and density estimation. Mixture models, hierarchical models, factorial models, hidden Markov, and state space models, Markov properties, and recursive algorithms for general probabilistic inference nonparametric methods including decision trees, kernal methods, neural networks, and wavelets. Ensemble methods. Also listed as Statistics C241A.
    </course>
    <course name="Advanced Topics in Learning and Decision Making" number="C281B" units="3">
        Recent topics include: Graphical models and approximate inference algorithms. Markov chain Monte Carlo, mean field and probability propagation methods. Model selection and stochastic realization. Bayesian information theoretic and structural risk minimization approaches. Markov decision processes and partially observable Markov decision processes. Reinforcement learning. Also listed as Statistics C241B.
    </course>
    <course name="Algebraic Algorithms" number="282" units="3">
        Theory and construction of symbolic algebraic computer programs. Polynomial arithmetic, GCD, factorization, integration of elementary functions, analytic approximation, simplification, design of computer systems and languages for symbolic manipulation.
    </course>
    <course name="Computer-Aided Geometric Design and Modeling" number="284" units="3">
        Mathematical techniques for curve and surface representation, including: Hermite interpolation, interpolatory splines, tensed splines, Bezier curves and surfaces, B-splines, Beta-splines, Coons patches, tensor product forms, as well as subdivision end/bounding conditions, and computational considerations.
    </course>
    <course name="Solid Free-Form Modeling and Fabrication" number="285" units="3">
        From shape design to computer-based descriptions suitable for manufacturing or rapid prototyping. Solid modeling techniques and procedural shape generation. Effective data structures and unambiguous part description formats. Algorithms for dealing with Boolean operations and for machine tool path planning. Problems of finite-precision geometry and machining tolerances. Introduction to some rapid prototyping techniques based on Solid Free-Form Fabrication and NC machining. Other advanced topics and recent developments in the field.
    </course>
    <course name="Implementation of Data Base Systems" number="286" units="3">
        Implementation of data base systems on modern hardware systems. Considerations concerning operating system design, including buffering, page size, prefetching, etc. Query processing algorithms, design of crash recovery and concurrency control systems. Implementation of distributed data bases and data base machines.
    </course>
    <course name="Artificial Intelligence Approach to Natural Language Processing" number="288" units="3">
        Representation of conceptual structures, language analysis and production, models of inference and memory, high-level text structures, question answering and conversation, machine translation.
    </course>
    <course name="Knowledge Representation and Use in Computers" number="289" units="3">
        Fundamentals of knowledge representation and use in computers. Predicate calculus, non-monotonic logics, probability and decision theory, and their use in capturing commonsense and expert knowledge. Theorem-provers, planning systems belief networks and influence diagrams as reasoning methods. Integrated architectures for intelligent agents. A project will be undertaken.
    </course>
    <course name="Vision A: Quantitative, Perceptual, and Physiological Aspects" number="C293A" units="2">
        The course will present basic material on the retina and visual pathways, psychophysical measurements, visual sensitivity, color vision, and the estimation of disparity and motion. Introduction to front-end visual processing in mammalian visual system. Basic optics, anatomy and physiology of retina, lateral geniculate nucleus, and primary visual cortex. Psychophysics of color, light and dark adaptation, spatial contrast sensitivity, spatial resolution, spatiotemporal contrast sensitivity, motion and disparity measurement. Connections between psychophysics and physiology. Relevant modeling techniques such as linear systems, signal detection theory, and information theory will be introduced and applied. There will be an accompanying laboratory which the students can register for separately. Also listed as Vision Science C290A and Molecular and Cell Biology C264A.
    </course>
    <course name="Vision B: Quantitative, Perceptual, and Physiological Aspects" number="C293B" units="2">
        The course will present basic material on inferring 3d from visual information. This will include disparity, motion, texture, shading, and occlusion. Introduction to the psychophysics and mathematical analysis underlying the inference of 3d scene properties from 2d retinal images. Psychophysics of various cues to 3d shape and spatial layout such as texture, contour, shading, stereopsis, and structure from motion. Geometrical analysis of these cues. Probabilitic theory for optimal combination of cues and estimation of scene properties. Relevant physiology of V1, V2, V4, and higher areas. Also listed as Vision Science C290B and Molecular and Cell Biology C264B.
    </course>
    <course name="Vision C: Perceptual Organization" number="C293C" units="2">
        This course will cover &quot;mid-level&quot; visual processing, including the perception of objects, their properties, and the determination of part-whole structure from optical images. The approach will be interdisciplinary, including material from psychophysics, classical perceptual psychology, computational modeling, and neuroscience. Specific topics include perception of color, grouping, figure-ground organization, modal and amodal completion, and part-whole structure. Also listed as Molecular and Cell Biology C264C, Vision Science C290C, and Psychology C215C.
    </course>
    <course name="Vision D: High-Level Vision" number="C293D" units="2">
        This course will cover &quot;high-level&quot; visual processing, including object recognition, visual attention, visual memory, visual imagery, and visual awarness. The approach will be interdisciplinary, including material from psychophysics, classical perceptual psychology, computational modeling and neurosciences. Also listed as Molecular and Cell Biology C264D, Vision Science C290D, and Psychology C215D.
    </course>
    <course name="Special Topics" number="294" units="1-4">
        Topics will vary from semester to semester. See Computer Science Division announcements.
    </course>
    <course name="Field Studies in Computer Science" number="297" units="1-12">
        Supervised experience in off-campus companies relevant to specific aspects and applications of electrical engineering and/or computer science. Written report required at the end of the semester.
    </course>
    <course name="Group Studies Seminars, or Group Research" number="298" units="1-4">
        Advanced study in various subjects through seminars on topics to be selected each year, informal group studies of special problems, group participation in comprehensive design problems, or group research on complete problems for analysis and experimentation.
    </course>
    <course name="Individual Research" number="299" units="1-12">
        Investigations of problems in computer science.
    </course>
    <course name="Teaching Practice" number="300" units="1-6">
        Supervised teaching practice, in either a one-on-one tutorial or classroom discussion setting.
    </course>
    <course name="Teaching Techniques for Computer Science" number="301" units="1">
        Discussion and practice of techniques for effective teaching.
    </course>
    <course name="Designing Computer Science Education" number="302" units="3">
        Discussion and review of research and practice relating to the teaching of computer science: knowledge organization and misconceptions, curriculum and topic organization, evaluation, collaborative learning, technology use, and administrative issues. As part of a semester-long project to design a computer science course, participants invent and refine a variety of homework and exam activities, and evaluate alternatives for textbooks, grading and other administrative policies, and innovative uses of technology.
    </course>
    <course name="Professional Preparation: Supervised Teaching of Computer Science" number="399" units="1,2">
        Discussion, problem review and development, guidance of computer science laboratory sections, course development, supervised practice teaching.
    </course>
    <course name="Individual Study for Doctoral Students" number="602" units="1-8">
        Individual study in consultation with the major field adviser, intended to provide an opportunity for qualified students to prepare themselves for the various examinations required of candidates for the Ph.D. (and other doctoral degrees).
    </course>
</department>
